<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".g.cs" #>
<#
    const int MAX_GENERICS = 16;

    string GenerateSequence(int count, string separator, System.Func<int, string> generator)
    {
        var sb = new StringBuilder();
        for (var i = 0; i < count; ++i)
        {
            sb.Append(generator(i));
            if (i < count - 1)
            {
                sb.Append(separator);
            }
        }
        return sb.ToString();
    }
#>
#pragma warning disable 1591
#nullable enable

using System;
using System.Runtime.CompilerServices;

namespace TinyEcs.Bevy
{
#if NET9_0_OR_GREATER
<#
    for (var i = 0; i < MAX_GENERICS; ++i)
    {
        var generics = GenerateSequence(i + 1, ", ", j => $"T{j}");
        var whereGenerics = GenerateSequence(i + 1, " ", j => $"where T{j} : struct");
        var ptrList = GenerateSequence(i + 1, "\n\t\t", j => $"private DataRow<T{j}> _current{j};");
        var ptrSet = GenerateSequence(i + 1, "\n\t\t\t\t", j => $"_current{j} = _iterator.GetColumn<T{j}>({j});");
        var ptrAdvance = GenerateSequence(i + 1, "\n\t\t\t\t", j => $"_current{j}.Next();");
        var fieldSign = GenerateSequence(i + 1, ", ", j => $"out Ptr<T{j}> ptr{j}");
        var fieldAssignments = GenerateSequence(i + 1, "\n\t\t\t", j => $"ptr{j} = _current{j}.Value;");
        var queryBuilderCalls = GenerateSequence(i + 1, "\n\t\t\t", j => $"builder.With<T{j}>();");
		var typeOfs = GenerateSequence(i + 1, ", ", j => $"typeof(T{j})");
#>
    [SkipLocalsInit]
    public unsafe ref struct Data<<#= generics #>> : IData<Data<<#= generics #>>>, IQueryComponentAccess
        <#= whereGenerics #>
    {
		private static readonly System.Type[] s_componentTypes = new[] { <#= typeOfs #> };
		public static System.ReadOnlySpan<System.Type> ReadComponents => s_componentTypes;
        public static System.ReadOnlySpan<System.Type> WriteComponents => s_componentTypes;

        private QueryIterator _iterator;
        private int _index, _count;
        private ReadOnlySpan<EntityView> _entities;
        <#= ptrList #>

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal Data(QueryIterator queryIterator)
        {
            _iterator = queryIterator;
            _index = -1;
            _count = -1;
        }

        public static void Build(QueryBuilder builder)
        {
            <#= queryBuilderCalls #>
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Data<<#= generics #>> CreateIterator(QueryIterator iterator)
            => new Data<<#= generics #>>(iterator);

        [System.Diagnostics.CodeAnalysis.UnscopedRef]
        public ref Data<<#= generics #>> Current
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get => ref this;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public readonly void Deconstruct(<#= fieldSign #>)
        {
            <#= fieldAssignments #>
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public readonly void Deconstruct(out PtrRO<EntityView> entity, <#= fieldSign #>)
        {
            entity = new (in _entities[_index]);
            <#= fieldAssignments #>
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool MoveNext()
        {
            if (++_index >= _count)
            {
                if (!_iterator.Next())
                    return false;

                <#= ptrSet #>
                _entities = _iterator.Entities();

                _index = 0;
                _count = _iterator.Count;
            }
            else
            {
                <#= ptrAdvance #>
            }

            return true;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public readonly Data<<#= generics #>> GetEnumerator() => this;
    }

<#
    }
#>
#endif
}

#pragma warning restore 1591
